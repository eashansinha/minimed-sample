[
  {
    "item": {
      "index": 1,
      "page": "Landing",
      "section": "Hero Section",
      "string": "Learn More",
      "language": "Spanish",
      "misc": "Highlight button only"
    },
    "url": "http://localhost:5173/?lang=es",
    "filename": "1_landing_hero_section_spanish_1758006086558.png",
    "filepath": "screenshots-trial2/1_landing_hero_section_spanish_1758006086558.png",
    "highlight_script": "\n    (() => {\n        console.log('Looking for \"Learn More\" in section \"Hero Section\"');\n        \n        // Remove any existing highlights\n        document.querySelectorAll('.devin-highlight').forEach(el => {\n            el.classList.remove('devin-highlight');\n            el.style.border = '';\n            el.style.boxShadow = '';\n            el.style.outline = '';\n            el.style.backgroundColor = '';\n        });\n        \n        let targetElements = [];\n        \n        // Strategy 1: Find by exact text content\n        const allElements = document.querySelectorAll('*');\n        for (let element of allElements) {\n            const text = element.textContent.trim();\n            if (text === \"Learn More\" || text.includes(\"Learn More\")) {\n                targetElements.push(element);\n            }\n        }\n        \n        // Strategy 2: Find by partial text matching in interactive elements\n        if (targetElements.length === 0) {\n            const interactiveElements = document.querySelectorAll('button, a, input, span, div, p, h1, h2, h3, h4, h5, h6, label');\n            for (let element of interactiveElements) {\n                const text = element.textContent.trim();\n                if (text.toLowerCase().includes(\"learn more\")) {\n                    targetElements.push(element);\n                }\n            }\n        }\n        \n        console.log('Found', targetElements.length, 'potential target elements');\n        \n        // Apply highlighting based on misc instructions\n        let highlightedCount = 0;\n        const misc = \"Highlight button only\";\n        \n        targetElements.forEach((element, index) => {\n            let elementToHighlight = element;\n            \n            // Determine what to highlight based on misc column\n            if (misc.includes('button only') && element.tagName !== 'BUTTON') {\n                const parentButton = element.closest('button');\n                if (parentButton) {\n                    elementToHighlight = parentButton;\n                }\n            } else if (misc.includes('full text') || misc.includes('full section')) {\n                // For full text/section, highlight the containing element\n                const container = element.closest('section, div, article, main, p');\n                if (container && container !== document.body) {\n                    elementToHighlight = container;\n                }\n            } else if (misc.includes('tooltip')) {\n                const tooltipTrigger = element.closest('[title], [data-tooltip], [aria-describedby]');\n                if (tooltipTrigger) {\n                    elementToHighlight = tooltipTrigger;\n                }\n            }\n            \n            // Apply red highlighting with strong visibility\n            elementToHighlight.classList.add('devin-highlight');\n            elementToHighlight.style.border = '3px solid #ff0000';\n            elementToHighlight.style.boxShadow = '0 0 15px rgba(255, 0, 0, 0.7), inset 0 0 15px rgba(255, 0, 0, 0.3)';\n            elementToHighlight.style.outline = '2px solid #ff0000';\n            elementToHighlight.style.outlineOffset = '3px';\n            \n            highlightedCount++;\n            console.log('Highlighted element', index + 1, ':', elementToHighlight.tagName, elementToHighlight.textContent.substring(0, 50));\n        });\n        \n        return {\n            success: highlightedCount > 0,\n            targetString: \"Learn More\",\n            section: \"Hero Section\",\n            misc: \"Highlight button only\",\n            elementsFound: targetElements.length,\n            elementsHighlighted: highlightedCount,\n            elements: targetElements.map(el => ({\n                tag: el.tagName,\n                text: el.textContent.substring(0, 100),\n                className: el.className\n            }))\n        };\n    })();\n    "
  },
  {
    "item": {
      "index": 2,
      "page": "Landing",
      "section": "Features",
      "string": "Track glucose levels continuously",
      "language": "French",
      "misc": "Highlight full text"
    },
    "url": "http://localhost:5173/?lang=fr",
    "filename": "2_landing_features_french_1758006086558.png",
    "filepath": "screenshots-trial2/2_landing_features_french_1758006086558.png",
    "highlight_script": "\n    (() => {\n        console.log('Looking for \"Track glucose levels continuously\" in section \"Features\"');\n        \n        // Remove any existing highlights\n        document.querySelectorAll('.devin-highlight').forEach(el => {\n            el.classList.remove('devin-highlight');\n            el.style.border = '';\n            el.style.boxShadow = '';\n            el.style.outline = '';\n            el.style.backgroundColor = '';\n        });\n        \n        let targetElements = [];\n        \n        // Strategy 1: Find by exact text content\n        const allElements = document.querySelectorAll('*');\n        for (let element of allElements) {\n            const text = element.textContent.trim();\n            if (text === \"Track glucose levels continuously\" || text.includes(\"Track glucose levels continuously\")) {\n                targetElements.push(element);\n            }\n        }\n        \n        // Strategy 2: Find by partial text matching in interactive elements\n        if (targetElements.length === 0) {\n            const interactiveElements = document.querySelectorAll('button, a, input, span, div, p, h1, h2, h3, h4, h5, h6, label');\n            for (let element of interactiveElements) {\n                const text = element.textContent.trim();\n                if (text.toLowerCase().includes(\"track glucose levels continuously\")) {\n                    targetElements.push(element);\n                }\n            }\n        }\n        \n        console.log('Found', targetElements.length, 'potential target elements');\n        \n        // Apply highlighting based on misc instructions\n        let highlightedCount = 0;\n        const misc = \"Highlight full text\";\n        \n        targetElements.forEach((element, index) => {\n            let elementToHighlight = element;\n            \n            // Determine what to highlight based on misc column\n            if (misc.includes('button only') && element.tagName !== 'BUTTON') {\n                const parentButton = element.closest('button');\n                if (parentButton) {\n                    elementToHighlight = parentButton;\n                }\n            } else if (misc.includes('full text') || misc.includes('full section')) {\n                // For full text/section, highlight the containing element\n                const container = element.closest('section, div, article, main, p');\n                if (container && container !== document.body) {\n                    elementToHighlight = container;\n                }\n            } else if (misc.includes('tooltip')) {\n                const tooltipTrigger = element.closest('[title], [data-tooltip], [aria-describedby]');\n                if (tooltipTrigger) {\n                    elementToHighlight = tooltipTrigger;\n                }\n            }\n            \n            // Apply red highlighting with strong visibility\n            elementToHighlight.classList.add('devin-highlight');\n            elementToHighlight.style.border = '3px solid #ff0000';\n            elementToHighlight.style.boxShadow = '0 0 15px rgba(255, 0, 0, 0.7), inset 0 0 15px rgba(255, 0, 0, 0.3)';\n            elementToHighlight.style.outline = '2px solid #ff0000';\n            elementToHighlight.style.outlineOffset = '3px';\n            \n            highlightedCount++;\n            console.log('Highlighted element', index + 1, ':', elementToHighlight.tagName, elementToHighlight.textContent.substring(0, 50));\n        });\n        \n        return {\n            success: highlightedCount > 0,\n            targetString: \"Track glucose levels continuously\",\n            section: \"Features\",\n            misc: \"Highlight full text\",\n            elementsFound: targetElements.length,\n            elementsHighlighted: highlightedCount,\n            elements: targetElements.map(el => ({\n                tag: el.tagName,\n                text: el.textContent.substring(0, 100),\n                className: el.className\n            }))\n        };\n    })();\n    "
  },
  {
    "item": {
      "index": 3,
      "page": "Auth",
      "section": "Login Form",
      "string": "Don't have an account?",
      "language": "French",
      "misc": "Highlight text only"
    },
    "url": "http://localhost:5173/login?lang=fr",
    "filename": "3_auth_login_form_french_1758006086558.png",
    "filepath": "screenshots-trial2/3_auth_login_form_french_1758006086558.png",
    "highlight_script": "\n    (() => {\n        console.log('Looking for \"Don't have an account?\" in section \"Login Form\"');\n        \n        // Remove any existing highlights\n        document.querySelectorAll('.devin-highlight').forEach(el => {\n            el.classList.remove('devin-highlight');\n            el.style.border = '';\n            el.style.boxShadow = '';\n            el.style.outline = '';\n            el.style.backgroundColor = '';\n        });\n        \n        let targetElements = [];\n        \n        // Strategy 1: Find by exact text content\n        const allElements = document.querySelectorAll('*');\n        for (let element of allElements) {\n            const text = element.textContent.trim();\n            if (text === \"Don't have an account?\" || text.includes(\"Don't have an account?\")) {\n                targetElements.push(element);\n            }\n        }\n        \n        // Strategy 2: Find by partial text matching in interactive elements\n        if (targetElements.length === 0) {\n            const interactiveElements = document.querySelectorAll('button, a, input, span, div, p, h1, h2, h3, h4, h5, h6, label');\n            for (let element of interactiveElements) {\n                const text = element.textContent.trim();\n                if (text.toLowerCase().includes(\"don't have an account?\")) {\n                    targetElements.push(element);\n                }\n            }\n        }\n        \n        console.log('Found', targetElements.length, 'potential target elements');\n        \n        // Apply highlighting based on misc instructions\n        let highlightedCount = 0;\n        const misc = \"Highlight text only\";\n        \n        targetElements.forEach((element, index) => {\n            let elementToHighlight = element;\n            \n            // Determine what to highlight based on misc column\n            if (misc.includes('button only') && element.tagName !== 'BUTTON') {\n                const parentButton = element.closest('button');\n                if (parentButton) {\n                    elementToHighlight = parentButton;\n                }\n            } else if (misc.includes('full text') || misc.includes('full section')) {\n                // For full text/section, highlight the containing element\n                const container = element.closest('section, div, article, main, p');\n                if (container && container !== document.body) {\n                    elementToHighlight = container;\n                }\n            } else if (misc.includes('tooltip')) {\n                const tooltipTrigger = element.closest('[title], [data-tooltip], [aria-describedby]');\n                if (tooltipTrigger) {\n                    elementToHighlight = tooltipTrigger;\n                }\n            }\n            \n            // Apply red highlighting with strong visibility\n            elementToHighlight.classList.add('devin-highlight');\n            elementToHighlight.style.border = '3px solid #ff0000';\n            elementToHighlight.style.boxShadow = '0 0 15px rgba(255, 0, 0, 0.7), inset 0 0 15px rgba(255, 0, 0, 0.3)';\n            elementToHighlight.style.outline = '2px solid #ff0000';\n            elementToHighlight.style.outlineOffset = '3px';\n            \n            highlightedCount++;\n            console.log('Highlighted element', index + 1, ':', elementToHighlight.tagName, elementToHighlight.textContent.substring(0, 50));\n        });\n        \n        return {\n            success: highlightedCount > 0,\n            targetString: \"Don't have an account?\",\n            section: \"Login Form\",\n            misc: \"Highlight text only\",\n            elementsFound: targetElements.length,\n            elementsHighlighted: highlightedCount,\n            elements: targetElements.map(el => ({\n                tag: el.tagName,\n                text: el.textContent.substring(0, 100),\n                className: el.className\n            }))\n        };\n    })();\n    "
  },
  {
    "item": {
      "index": 4,
      "page": "Dashboard",
      "section": "Activity Feed",
      "string": "BasalDelivery",
      "language": "German",
      "misc": "Highlight all instances"
    },
    "url": "http://localhost:5173/dashboard?lang=de",
    "filename": "4_dashboard_activity_feed_german_1758006086558.png",
    "filepath": "screenshots-trial2/4_dashboard_activity_feed_german_1758006086558.png",
    "highlight_script": "\n    (() => {\n        console.log('Looking for \"BasalDelivery\" in section \"Activity Feed\"');\n        \n        // Remove any existing highlights\n        document.querySelectorAll('.devin-highlight').forEach(el => {\n            el.classList.remove('devin-highlight');\n            el.style.border = '';\n            el.style.boxShadow = '';\n            el.style.outline = '';\n            el.style.backgroundColor = '';\n        });\n        \n        let targetElements = [];\n        \n        // Strategy 1: Find by exact text content\n        const allElements = document.querySelectorAll('*');\n        for (let element of allElements) {\n            const text = element.textContent.trim();\n            if (text === \"BasalDelivery\" || text.includes(\"BasalDelivery\")) {\n                targetElements.push(element);\n            }\n        }\n        \n        // Strategy 2: Find by partial text matching in interactive elements\n        if (targetElements.length === 0) {\n            const interactiveElements = document.querySelectorAll('button, a, input, span, div, p, h1, h2, h3, h4, h5, h6, label');\n            for (let element of interactiveElements) {\n                const text = element.textContent.trim();\n                if (text.toLowerCase().includes(\"basaldelivery\")) {\n                    targetElements.push(element);\n                }\n            }\n        }\n        \n        console.log('Found', targetElements.length, 'potential target elements');\n        \n        // Apply highlighting based on misc instructions\n        let highlightedCount = 0;\n        const misc = \"Highlight all instances\";\n        \n        targetElements.forEach((element, index) => {\n            let elementToHighlight = element;\n            \n            // Determine what to highlight based on misc column\n            if (misc.includes('button only') && element.tagName !== 'BUTTON') {\n                const parentButton = element.closest('button');\n                if (parentButton) {\n                    elementToHighlight = parentButton;\n                }\n            } else if (misc.includes('full text') || misc.includes('full section')) {\n                // For full text/section, highlight the containing element\n                const container = element.closest('section, div, article, main, p');\n                if (container && container !== document.body) {\n                    elementToHighlight = container;\n                }\n            } else if (misc.includes('tooltip')) {\n                const tooltipTrigger = element.closest('[title], [data-tooltip], [aria-describedby]');\n                if (tooltipTrigger) {\n                    elementToHighlight = tooltipTrigger;\n                }\n            }\n            \n            // Apply red highlighting with strong visibility\n            elementToHighlight.classList.add('devin-highlight');\n            elementToHighlight.style.border = '3px solid #ff0000';\n            elementToHighlight.style.boxShadow = '0 0 15px rgba(255, 0, 0, 0.7), inset 0 0 15px rgba(255, 0, 0, 0.3)';\n            elementToHighlight.style.outline = '2px solid #ff0000';\n            elementToHighlight.style.outlineOffset = '3px';\n            \n            highlightedCount++;\n            console.log('Highlighted element', index + 1, ':', elementToHighlight.tagName, elementToHighlight.textContent.substring(0, 50));\n        });\n        \n        return {\n            success: highlightedCount > 0,\n            targetString: \"BasalDelivery\",\n            section: \"Activity Feed\",\n            misc: \"Highlight all instances\",\n            elementsFound: targetElements.length,\n            elementsHighlighted: highlightedCount,\n            elements: targetElements.map(el => ({\n                tag: el.tagName,\n                text: el.textContent.substring(0, 100),\n                className: el.className\n            }))\n        };\n    })();\n    "
  },
  {
    "item": {
      "index": 5,
      "page": "Dashboard",
      "section": "Glucose Chart",
      "string": "value",
      "language": "French",
      "misc": "Highlight tooltip text"
    },
    "url": "http://localhost:5173/dashboard?lang=fr",
    "filename": "5_dashboard_glucose_chart_french_1758006086558.png",
    "filepath": "screenshots-trial2/5_dashboard_glucose_chart_french_1758006086558.png",
    "highlight_script": "\n    (() => {\n        console.log('Looking for \"value\" in section \"Glucose Chart\"');\n        \n        // Remove any existing highlights\n        document.querySelectorAll('.devin-highlight').forEach(el => {\n            el.classList.remove('devin-highlight');\n            el.style.border = '';\n            el.style.boxShadow = '';\n            el.style.outline = '';\n            el.style.backgroundColor = '';\n        });\n        \n        let targetElements = [];\n        \n        // Strategy 1: Find by exact text content\n        const allElements = document.querySelectorAll('*');\n        for (let element of allElements) {\n            const text = element.textContent.trim();\n            if (text === \"value\" || text.includes(\"value\")) {\n                targetElements.push(element);\n            }\n        }\n        \n        // Strategy 2: Find by partial text matching in interactive elements\n        if (targetElements.length === 0) {\n            const interactiveElements = document.querySelectorAll('button, a, input, span, div, p, h1, h2, h3, h4, h5, h6, label');\n            for (let element of interactiveElements) {\n                const text = element.textContent.trim();\n                if (text.toLowerCase().includes(\"value\")) {\n                    targetElements.push(element);\n                }\n            }\n        }\n        \n        console.log('Found', targetElements.length, 'potential target elements');\n        \n        // Apply highlighting based on misc instructions\n        let highlightedCount = 0;\n        const misc = \"Highlight tooltip text\";\n        \n        targetElements.forEach((element, index) => {\n            let elementToHighlight = element;\n            \n            // Determine what to highlight based on misc column\n            if (misc.includes('button only') && element.tagName !== 'BUTTON') {\n                const parentButton = element.closest('button');\n                if (parentButton) {\n                    elementToHighlight = parentButton;\n                }\n            } else if (misc.includes('full text') || misc.includes('full section')) {\n                // For full text/section, highlight the containing element\n                const container = element.closest('section, div, article, main, p');\n                if (container && container !== document.body) {\n                    elementToHighlight = container;\n                }\n            } else if (misc.includes('tooltip')) {\n                const tooltipTrigger = element.closest('[title], [data-tooltip], [aria-describedby]');\n                if (tooltipTrigger) {\n                    elementToHighlight = tooltipTrigger;\n                }\n            }\n            \n            // Apply red highlighting with strong visibility\n            elementToHighlight.classList.add('devin-highlight');\n            elementToHighlight.style.border = '3px solid #ff0000';\n            elementToHighlight.style.boxShadow = '0 0 15px rgba(255, 0, 0, 0.7), inset 0 0 15px rgba(255, 0, 0, 0.3)';\n            elementToHighlight.style.outline = '2px solid #ff0000';\n            elementToHighlight.style.outlineOffset = '3px';\n            \n            highlightedCount++;\n            console.log('Highlighted element', index + 1, ':', elementToHighlight.tagName, elementToHighlight.textContent.substring(0, 50));\n        });\n        \n        return {\n            success: highlightedCount > 0,\n            targetString: \"value\",\n            section: \"Glucose Chart\",\n            misc: \"Highlight tooltip text\",\n            elementsFound: targetElements.length,\n            elementsHighlighted: highlightedCount,\n            elements: targetElements.map(el => ({\n                tag: el.tagName,\n                text: el.textContent.substring(0, 100),\n                className: el.className\n            }))\n        };\n    })();\n    "
  }
]